* TODO adicionar descrições


* ACE-WINDOW
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "M-p") 'ace-window)

#+END_SRC


* AUTO-COMPLETE
#+BEGIN_SRC emacs-lisp
(define-globalized-minor-mode real-global-auto-complete-mode
  auto-complete-mode (lambda ()
                       (if (not (minibufferp (current-buffer)))
                         (auto-complete-mode 1))
                       ))
(real-global-auto-complete-mode t)


#+END_SRC

* BACKUPS
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs.d/saves")))

#+END_SRC


* ELPA 
#+BEGIN_SRC emacs-lisp


(require 'package)
(package-initialize)
(setq package-archives
'(("ELPA" . "http://tromey.com/elpa/")
   ("gnu" . "http://elpa.gnu.org/packages/")
   ("melpa" . "http://melpa.milkbox.net/packages/")))
   ;;("marmalade" . "http://marmalade-repo.org/packages/")

#+END_SRC


* HELM

#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(helm-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x) ;;M-x replaced
(global-set-key (kbd "C-x C-f") 'helm-find-files) ;; Find Files replaced
#+END_SRC


* HLEDGER
#+BEGIN_SRC emacs-lisp



;;; Basic configuration
(require 'hledger-mode)

;; To open files with .journal extension in hledger-mode
(add-to-list 'auto-mode-alist '("\\.journal\\'" . hledger-mode))

;; Provide the path to you journal file.
;; The default location is too opinionated.
(setq hledger-jfile "~/org/contas/hledger.journal")

;; For auto-complete users,
(add-to-list 'ac-modes 'hledger-mode)
(add-hook 'hledger-mode-hook
    (lambda ()
        (setq-local ac-sources '(hledger-ac-source))))

#+END_SRC


* MAGIT
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status) 

#+END_SRC


* ORG MODE
#+BEGIN_SRC emacs-lisp

(setq org-directory "~/org/"
      org-archive-location (concat org-directory "/archives/%s_archive::"))

#+END_SRC

** COSMETICS 

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)  ;; you want this to activate coloring in blocks
(setq org-src-tab-acts-natively t)
(setq org-pretty-entities t)

#+END_SRC



** AGENDA 
*** AGENDA KEYBINDINGS
#+BEGIN_SRC emacs-lisp


(global-set-key "\C-cl" 'org-store-link)
(global-set-key "§" 'org-capture)
(global-set-key (kbd "C-c a") 'org-agenda)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map (kbd "C-c a") 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

#+END_SRC

*** AGENDA FILES 
 #+BEGIN_SRC emacs-lisp
 (setq org-log-done 'time)
 (setq org-agenda-files (list "~/org/work.org"
                              "~/org/school.org"
                              "~/org/home.org"
                              "~/org/pessoal.org"))
 #+END_SRC


** CAPTURE 
#+BEGIN_SRC emacs-lisp

(setq org-default-notes-file "~/org/notes.org")
     (define-key global-map "\C-cd" 'org-capture)

#+END_SRC



** REVEAL
#+BEGIN_SRC emacs-lisp
(require 'ox-reveal)

#+END_SRC


** EXPORT
#+BEGIN_SRC emacs-lisp
(setenv "PATH"
(concat
 "~/Library/TeX/texbin" ":"

(getenv "PATH")))

#+END_SRC


** MIND MAP 
#+BEGIN_SRC emacs-lisp

(load "/Users/max/.emacs.d/elpa/org-mind-map-20170827.1554/org-mind-map.el")

#+END_SRC






** BABEL 
*** Active Babel languages
 #+BEGIN_SRC emacs-lisp

 (org-babel-do-load-languages
  'org-babel-load-languages
  '((R . t)
    (python . t)
    (ruby . t)
    (shell . t)
     ))

 #+END_SRC


** Completions
#+BEGIN_SRC emacs-lisp
(defun my-org-mode-hook ()
(add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
(add-hook 'org-mode-hook #'my-org-mode-hook)
#+END_SRC

* POWER LINE 
#+BEGIN_SRC emacs-lisp

(require 'powerline)
(powerline-vim-theme)

#+END_SRC


* VISUAL/THEME

stuff /stolen/ from awalker4

** GUI stuff
#+BEGIN_SRC emacs-lisp
(dolist (mode
         '(tool-bar-mode                ; No toolbars, more room for text.
           menu-bar-mode                ; No menu bar
           scroll-bar-mode              ; No scroll bars either.
           blink-cursor-mode))          ; The blinking cursor gets old.
  (funcall mode 0))

#+END_SRC


** Theme
 
 #+BEGIN_SRC emacs-lisp

 (defun aw/load-theme ()
   (load-theme 'zenburn t)
   (when (member "Inconsolata" (font-family-list))
     (set-face-attribute 'default nil :font "Inconsolata-13")
     (add-to-list 'default-frame-alist
                  '(font . "Inconsolata-13"))))

 (defun aw/load-theme-in-frame (frame)
   (select-frame frame)
   (aw/load-theme))

 (if (daemonp)
     (add-hook 'after-make-frame-functions #'aw/load-theme-in-frame)
   (aw/load-theme))

 #+END_SRC

